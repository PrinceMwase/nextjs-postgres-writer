generator client {
  provider = "prisma-client-js"
}




datasource db {
  provider = "mysql"
  url = env("MYSQL_URL") // uses connection pooling
  directUrl = env("MYSQL_URL") // uses a direct connection
}

model User {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  password          String
  firstname         String?
  lastname          String?
  PoemLike          PoemLike[]
  writer            Writer[]
  writerLike        writerLike[]
  userTags          userTags[]
  WriterMute        WriterMute[]
  emailVerified     Boolean      @default(false)
  verificationToken String?      @unique
  suspended         Boolean?     @default(false)
  verifiedUser      Boolean?     @default(false)
  resetToken        String?      @unique // New field for password reset token
  resetTokenExpiry  DateTime? // New field for reset token expiry timestamp
}

model Writer {
  id         Int          @id @default(autoincrement())
  username   String       @unique
  userId     Int          @unique
  Comment    Comment[]
  Poem       Poem[]
  user       User         @relation(fields: [userId], references: [id])
  writerLike writerLike[]
  about      String?
  photoId    Int?
  photo      Photo?       @relation(fields: [photoId], references: [id], onDelete: Cascade)
  WriterMute WriterMute[]

  @@unique([id, photoId])
}

model Poem {
  id          Int        @id @default(autoincrement())
  title       String
  content     Json
  background  String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  writerId    Int
  writer      Writer     @relation(fields: [writerId], references: [id])
  genreId     Int?
  genre       Genre?     @relation(fields: [genreId], references: [id])
  PoemLike    PoemLike[]
  description String?
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  writerId  Int
  poemId    Int
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
  writer    Writer   @relation(fields: [writerId], references: [id])
}

model PoemLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  poemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)

  @@unique([userId, poemId])
  @@index([userId, poemId])
}

model writerLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  writerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Writer    Writer   @relation(fields: [writerId], references: [id], onDelete: Cascade)

  @@unique([userId, writerId])
  @@index([userId, writerId])
}

model WriterMute {
  id        Int      @id @default(autoincrement())
  userId    Int
  writerId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Writer    Writer   @relation(fields: [writerId], references: [id], onDelete: Cascade)

  @@unique([userId, writerId])
  @@index([userId, writerId])
}

model Tag {
  id       Int        @id @default(autoincrement())
  tag      String     @unique
  userTags userTags[]
}

model userTags {
  id     Int  @id @default(autoincrement())
  userId Int
  tagId  Int
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tagId])
}

model Genre {
  id      Int    @id @default(autoincrement())
  genre   String @unique
  photoId Int    @unique
  photo   Photo  @relation(fields: [photoId], references: [id], onDelete: Cascade)
  Poem    Poem[]
}

model Photo {
  id     Int      @id @default(autoincrement())
  link   String
  Writer Writer[]
  Genre  Genre[]
}
