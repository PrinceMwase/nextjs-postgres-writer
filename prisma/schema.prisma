// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id       Int       @id @default(autoincrement())
  email    String    @unique
  password String
  writer   Writer[]
}

model Writer {
  id       Int       @id @default(autoincrement())
  username String    @unique
  userId   Int
  user     User      @relation(fields: [userId], references: [id])
  Poem     Poem[]
  Comment  Comment[]
}

// A model for a poem
model Poem {
  id         Int       @id @default(autoincrement()) // The unique identifier for a poem
  title      String // The title of the poem
  content    Json // The content of the poem
  background String
  createdAt  DateTime  @default(now()) // The date and time when the poem was created
  updatedAt  DateTime  @updatedAt // The date and time when the poem was last updated
  writer     Writer    @relation(fields: [writerId], references: [id]) // The user who wrote the poem
  writerId   Int // The foreign key for the author
  comments   Comment[] // The comments on the poem
}

// A model for a comment
model Comment {
  id        Int      @id @default(autoincrement()) // The unique identifier for a comment
  content   String // The content of the comment
  createdAt DateTime @default(now()) // The date and time when the comment was created
  updatedAt DateTime @updatedAt // The date and time when the comment was last updated
  writer    Writer   @relation(fields: [writerId], references: [id]) // The user who made the comment
  writerId  Int // The foreign key for the author
  poem      Poem     @relation(fields: [poemId], references: [id]) // The poem that the comment belongs to
  poemId    Int 
}
