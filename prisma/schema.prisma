generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id       Int        @id @default(autoincrement())
  email    String     @unique
  password String
  PoemLike PoemLike[]
  writer   Writer[]
}

model Writer {
  id       Int       @id @default(autoincrement())
  username String    @unique
  userId   Int
  Comment  Comment[]
  Poem     Poem[]
  user     User      @relation(fields: [userId], references: [id])
}

model Poem {
  id         Int        @id @default(autoincrement())
  title      String
  content    Json
  background String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  writerId   Int
  comments   Comment[]
  writer     Writer     @relation(fields: [writerId], references: [id])
  PoemLike   PoemLike[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  writerId  Int
  poemId    Int
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)
  writer    Writer   @relation(fields: [writerId], references: [id])
}

model PoemLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  poemId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  poem      Poem     @relation(fields: [poemId], references: [id], onDelete: Cascade)

  @@unique([userId, poemId])
  @@index([userId, poemId])
}
